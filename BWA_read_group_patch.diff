Index: bwape.c
===================================================================
--- bwape.c	(revision 45)
+++ bwape.c	(working copy)
@@ -42,9 +42,9 @@
 void bwa_aln2seq(int n_aln, const bwt_aln1_t *aln, bwa_seq_t *s);
 void bwa_refine_gapped(const bntseq_t *bns, int n_seqs, bwa_seq_t *seqs, ubyte_t *_pacseq, bntseq_t *ntbns);
 int bwa_approx_mapQ(const bwa_seq_t *p, int mm);
-void bwa_print_sam1(const bntseq_t *bns, bwa_seq_t *p, const bwa_seq_t *mate, int mode, int max_top2);
+void bwa_print_sam1(const bntseq_t *bns, bwa_seq_t *p, const bwa_seq_t *mate, int mode, int max_top2, const char * rg_id);
 bntseq_t *bwa_open_nt(const char *prefix);
-void bwa_print_sam_SQ(const bntseq_t *bns);
+void bwa_print_sam_SQ(const bntseq_t *bns, const read_group_t * rg);
 
 pe_opt_t *bwa_init_pe_opt()
 {
@@ -641,7 +641,7 @@
 	return pacseq;
 }
 
-void bwa_sai2sam_pe_core(const char *prefix, char *const fn_sa[2], char *const fn_fa[2], pe_opt_t *popt)
+void bwa_sai2sam_pe_core(const char *prefix, char *const fn_sa[2], char *const fn_fa[2], pe_opt_t *popt, const read_group_t * rg)
 {
 	int i, j, n_seqs, tot_seqs = 0;
 	bwa_seq_t *seqs[2];
@@ -655,6 +655,7 @@
 	char str[1024];
 	bwt_t *bwt[2];
 	uint8_t *pac;
+	char * rg_id;
 
 	// initialization
 	bwase_initialize(); // initialize g_log_n[] in bwase.c
@@ -668,6 +669,7 @@
 	}
 	g_hash = kh_init(64);
 	last_ii.avg = -1.0;
+	rg_id = rg != NULL ? rg->ID : NULL;
 
 	fread(&opt, sizeof(gap_opt_t), 1, fp_sa[0]);
 	fread(&opt, sizeof(gap_opt_t), 1, fp_sa[1]);
@@ -687,7 +689,7 @@
 	}
 
 	// core loop
-	bwa_print_sam_SQ(bns);
+	bwa_print_sam_SQ(bns, rg);
 	while ((seqs[0] = bwa_read_seq(ks[0], 0x40000, &n_seqs, opt.mode & BWA_MODE_COMPREAD, opt.trim_qual)) != 0) {
 		int cnt_chg;
 		isize_info_t ii;
@@ -714,8 +716,8 @@
 
 		fprintf(stderr, "[bwa_sai2sam_pe_core] print alignments... ");
 		for (i = 0; i < n_seqs; ++i) {
-			bwa_print_sam1(bns, seqs[0] + i, seqs[1] + i, opt.mode, opt.max_top2);
-			bwa_print_sam1(bns, seqs[1] + i, seqs[0] + i, opt.mode, opt.max_top2);
+			bwa_print_sam1(bns, seqs[0] + i, seqs[1] + i, opt.mode, opt.max_top2, rg_id);
+			bwa_print_sam1(bns, seqs[1] + i, seqs[0] + i, opt.mode, opt.max_top2, rg_id);
 		}
 		fprintf(stderr, "%.2f sec\n", (float)(clock() - t) / CLOCKS_PER_SEC); t = clock();
 
@@ -744,8 +746,10 @@
 {
 	int c;
 	pe_opt_t *popt;
+    read_group_t rg = { NULL, NULL, NULL, NULL };
+
 	popt = bwa_init_pe_opt();
-	while ((c = getopt(argc, argv, "a:o:sPn:N:c:f:A")) >= 0) {
+	while ((c = getopt(argc, argv, "a:o:sPn:N:c:f:Ai:m:l:p:")) >= 0) {
 		switch (c) {
 		case 'a': popt->max_isize = atoi(optarg); break;
 		case 'o': popt->max_occ = atoi(optarg); break;
@@ -756,11 +760,18 @@
 		case 'c': popt->ap_prior = atof(optarg); break;
         case 'f': freopen(optarg, "w", stdout); break;
 		case 'A': popt->force_isize = 1; break;
+
+        // parsing read group information
+        case 'i': rg.ID = optarg; break;
+        case 'm': rg.SM = optarg; break;
+        case 'l': rg.LB = optarg; break;
+        case 'p': rg.PL = optarg; break;
+
 		default: return 1;
 		}
 	}
 
-	if (optind + 5 > argc) {
+	if (optind + 5 > argc || (rg.ID != NULL && rg.SM == NULL) || (rg.ID == NULL && rg.SM != NULL) ) {
 		fprintf(stderr, "\n");
 		fprintf(stderr, "Usage:   bwa sampe [options] <prefix> <in1.sai> <in2.sai> <in1.fq> <in2.fq>\n\n");
 		fprintf(stderr, "Options: -a INT   maximum insert size [%d]\n", popt->max_isize);
@@ -772,13 +783,17 @@
 		fprintf(stderr, "         -P       preload index into memory (for base-space reads only)\n");
 		fprintf(stderr, "         -s       disable Smith-Waterman for the unmapped mate\n");
 		fprintf(stderr, "         -A       disable insert size estimate (force -s)\n\n");
+		fprintf(stderr, "         -i       read group identifier (ID)\n");
+		fprintf(stderr, "         -m       read group sample (SM), required if ID is given\n");
+		fprintf(stderr, "         -l       read group library (LB)\n");
+		fprintf(stderr, "         -p       read group platform (PL)\n");
 		fprintf(stderr, "Notes: 1. For SOLiD reads, <in1.fq> corresponds R3 reads and <in2.fq> to F3.\n");
 		fprintf(stderr, "       2. For reads shorter than 30bp, applying a smaller -o is recommended to\n");
 		fprintf(stderr, "          to get a sensible speed at the cost of pairing accuracy.\n");
 		fprintf(stderr, "\n");
 		return 1;
 	}
-	bwa_sai2sam_pe_core(argv[optind], argv + optind + 1, argv + optind+3, popt);
+	bwa_sai2sam_pe_core(argv[optind], argv + optind + 1, argv + optind+3, popt, &rg);
 	free(popt);
 	return 0;
 }
Index: bntseq.h
===================================================================
--- bntseq.h	(revision 45)
+++ bntseq.h	(working copy)
@@ -60,6 +60,19 @@
 	FILE *fp_pac;
 } bntseq_t;
 
+// simple type for representing minimal read group information
+typedef struct {
+	char* ID; // Unique read group identifier. The value of the ID field is used in the RG tags of alignment records.
+	char* SM; // Sample (use pool name where a pool is being sequenced)
+	char* LB; // Library
+	char* PL; // Platform/technology used to produce the read.
+	//char* CN; // Name of sequencing center producing the read
+	//char* DS; // Description
+	//char* PU; // Platform unit (e.g. lane for Illumina or slide for SOLiD); should be a full, unambiguous identifier
+	//char* PI; // Predicted median insert size (maybe different from the actual median insert size)
+	//char* DT; // Date the run was produced (ISO 8601 date or date/time)
+} read_group_t;
+
 extern unsigned char nst_nt4_table[256];
 
 #ifdef __cplusplus
Index: bwase.c
===================================================================
--- bwase.c	(revision 45)
+++ bwase.c	(working copy)
@@ -408,115 +408,120 @@
 	return -1;
 }
 
-void bwa_print_sam1(const bntseq_t *bns, bwa_seq_t *p, const bwa_seq_t *mate, int mode, int max_top2)
+void bwa_print_sam1(const bntseq_t *bns, bwa_seq_t *p, const bwa_seq_t *mate, int mode, int max_top2, const char * rg_id)
 {
-	int j;
-	if (p->type != BWA_TYPE_NO_MATCH || (mate && mate->type != BWA_TYPE_NO_MATCH)) {
-		int seqid, nn, am = 0, flag = p->extra_flag;
-		char XT;
+  int j;
+  if (p->type != BWA_TYPE_NO_MATCH || (mate && mate->type != BWA_TYPE_NO_MATCH)) {
+    int seqid, nn, am = 0, flag = p->extra_flag;
+    char XT;
 
-		if (p->type == BWA_TYPE_NO_MATCH) {
-			p->pos = mate->pos;
-			p->strand = mate->strand;
-			flag |= SAM_FSU;
-			j = 1;
-		} else j = pos_end(p) - p->pos; // j is the length of the reference in the alignment
+    if (p->type == BWA_TYPE_NO_MATCH) {
+      p->pos = mate->pos;
+      p->strand = mate->strand;
+      flag |= SAM_FSU;
+      j = 1;
+    } else j = pos_end(p) - p->pos; // j is the length of the reference in the alignment
 
-		// get seqid
-		nn = bns_coor_pac2real(bns, p->pos, j, &seqid);
-		if (p->type != BWA_TYPE_NO_MATCH && p->pos + j - bns->anns[seqid].offset > bns->anns[seqid].len)
-			flag |= SAM_FSU; // flag UNMAP as this alignment bridges two adjacent reference sequences
+    // get seqid
+    nn = bns_coor_pac2real(bns, p->pos, j, &seqid);
+    if (p->type != BWA_TYPE_NO_MATCH && p->pos + j - bns->anns[seqid].offset > bns->anns[seqid].len)
+      flag |= SAM_FSU; // flag UNMAP as this alignment bridges two adjacent reference sequences
 
-		// update flag and print it
-		if (p->strand) flag |= SAM_FSR;
-		if (mate) {
-			if (mate->type != BWA_TYPE_NO_MATCH) {
-				if (mate->strand) flag |= SAM_FMR;
-			} else flag |= SAM_FMU;
-		}
-		printf("%s\t%d\t%s\t", p->name, flag, bns->anns[seqid].name);
-		printf("%d\t%d\t", (int)(p->pos - bns->anns[seqid].offset + 1), p->mapQ);
+    // update flag and print it
+    if (p->strand) flag |= SAM_FSR;
+    if (mate) {
+      if (mate->type != BWA_TYPE_NO_MATCH) {
+	if (mate->strand) flag |= SAM_FMR;
+      } else flag |= SAM_FMU;
+    }
+    printf("%s\t%d\t%s\t", p->name, flag, bns->anns[seqid].name);
+    printf("%d\t%d\t", (int)(p->pos - bns->anns[seqid].offset + 1), p->mapQ);
 
-		// print CIGAR
-		if (p->cigar) {
-			for (j = 0; j != p->n_cigar; ++j)
-				printf("%d%c", __cigar_len(p->cigar[j]), "MIDS"[__cigar_op(p->cigar[j])]);
-		} else if (p->type == BWA_TYPE_NO_MATCH) printf("*");
-		else printf("%dM", p->len);
+    // print CIGAR
+    if (p->cigar) {
+      for (j = 0; j != p->n_cigar; ++j)
+	printf("%d%c", __cigar_len(p->cigar[j]), "MIDS"[__cigar_op(p->cigar[j])]);
+    } else if (p->type == BWA_TYPE_NO_MATCH) printf("*");
+    else printf("%dM", p->len);
 
-		// print mate coordinate
-		if (mate && mate->type != BWA_TYPE_NO_MATCH) {
-			int m_seqid, m_is_N;
-			long long isize;
-			am = mate->seQ < p->seQ? mate->seQ : p->seQ; // smaller single-end mapping quality
-			// redundant calculation here, but should not matter too much
-			m_is_N = bns_coor_pac2real(bns, mate->pos, mate->len, &m_seqid);
-			printf("\t%s\t", (seqid == m_seqid)? "=" : bns->anns[m_seqid].name);
-			isize = (seqid == m_seqid)? pos_5(mate) - pos_5(p) : 0;
-			if (p->type == BWA_TYPE_NO_MATCH) isize = 0;
-			printf("%d\t%lld\t", (int)(mate->pos - bns->anns[m_seqid].offset + 1), isize);
-		} else if (mate) printf("\t=\t%d\t0\t", (int)(p->pos - bns->anns[seqid].offset + 1));
-		else printf("\t*\t0\t0\t");
+    // print mate coordinate
+    if (mate && mate->type != BWA_TYPE_NO_MATCH) {
+      int m_seqid, m_is_N;
+      long long isize;
+      am = mate->seQ < p->seQ? mate->seQ : p->seQ; // smaller single-end mapping quality
+      // redundant calculation here, but should not matter too much
+      m_is_N = bns_coor_pac2real(bns, mate->pos, mate->len, &m_seqid);
+      printf("\t%s\t", (seqid == m_seqid)? "=" : bns->anns[m_seqid].name);
+      isize = (seqid == m_seqid)? pos_5(mate) - pos_5(p) : 0;
+      if (p->type == BWA_TYPE_NO_MATCH) isize = 0;
+      printf("%d\t%lld\t", (int)(mate->pos - bns->anns[m_seqid].offset + 1), isize);
+    } else if (mate) printf("\t=\t%d\t0\t", (int)(p->pos - bns->anns[seqid].offset + 1));
+    else printf("\t*\t0\t0\t");
 
-		// print sequence and quality
-		if (p->strand == 0)
-			for (j = 0; j != p->full_len; ++j) putchar("ACGTN"[(int)p->seq[j]]);
-		else for (j = 0; j != p->full_len; ++j) putchar("TGCAN"[p->seq[p->full_len - 1 - j]]);
-		putchar('\t');
-		if (p->qual) {
-			if (p->strand) seq_reverse(p->len, p->qual, 0); // reverse quality
-			printf("%s", p->qual);
-		} else printf("*");
+    // print sequence and quality
+    if (p->strand == 0)
+      for (j = 0; j != p->full_len; ++j) putchar("ACGTN"[(int)p->seq[j]]);
+    else for (j = 0; j != p->full_len; ++j) putchar("TGCAN"[p->seq[p->full_len - 1 - j]]);
+    putchar('\t');
+    if (p->qual) {
+      if (p->strand) seq_reverse(p->len, p->qual, 0); // reverse quality
+      printf("%s", p->qual);
+    } else printf("*");
 
-		if (p->clip_len < p->full_len) printf("\tXC:i:%d", p->clip_len);
-		if (p->type != BWA_TYPE_NO_MATCH) {
-			int i;
-			// calculate XT tag
-			XT = "NURM"[p->type];
-			if (nn > 10) XT = 'N';
-			// print tags
-			printf("\tXT:A:%c\t%s:i:%d", XT, (mode & BWA_MODE_COMPREAD)? "NM" : "CM", p->nm);
-			if (nn) printf("\tXN:i:%d", nn);
-			if (mate) printf("\tSM:i:%d\tAM:i:%d", p->seQ, am);
-			if (p->type != BWA_TYPE_MATESW) { // X0 and X1 are not available for this type of alignment
-				printf("\tX0:i:%d", p->c1);
-				if (p->c1 <= max_top2) printf("\tX1:i:%d", p->c2);
-			}
-			printf("\tXM:i:%d\tXO:i:%d\tXG:i:%d", p->n_mm, p->n_gapo, p->n_gapo+p->n_gape);
-			if (p->md) printf("\tMD:Z:%s", p->md);
-			// print multiple hits
-			if (p->n_multi) {
-				printf("\tXA:Z:");
-				for (i = 0; i < p->n_multi; ++i) {
-					bwt_multi1_t *q = p->multi + i;
-					int k;
-					j = pos_end_multi(q, p->len) - q->pos;
-					nn = bns_coor_pac2real(bns, q->pos, j, &seqid);
-					printf("%s,%c%d,", bns->anns[seqid].name, q->strand? '-' : '+',
-						   (int)(q->pos - bns->anns[seqid].offset + 1));
-					if (q->cigar) {
-						for (k = 0; k < q->n_cigar; ++k)
-							printf("%d%c", __cigar_len(q->cigar[k]), "MIDS"[__cigar_op(q->cigar[k])]);
-					} else printf("%dM", p->len);
-					printf(",%d;", q->gap + q->mm);
-				}
-			}
-		}
-		putchar('\n');
-	} else { // this read has no match
-		ubyte_t *s = p->strand? p->rseq : p->seq;
-		int flag = p->extra_flag | SAM_FSU;
-		if (mate && mate->type == BWA_TYPE_NO_MATCH) flag |= SAM_FMU;
-		printf("%s\t%d\t*\t0\t0\t*\t*\t0\t0\t", p->name, flag);
-		for (j = 0; j != p->len; ++j) putchar("ACGTN"[(int)s[j]]);
-		putchar('\t');
-		if (p->qual) {
-			if (p->strand) seq_reverse(p->len, p->qual, 0); // reverse quality
-			printf("%s", p->qual);
-		} else printf("*");
-		if (p->clip_len < p->full_len) printf("\tXC:i:%d", p->clip_len);
-		putchar('\n');
+    // print the read group information if present
+    if ( rg_id != NULL ) printf("\tRG:Z:%s", rg_id);
+
+    if (p->clip_len < p->full_len) printf("\tXC:i:%d", p->clip_len);
+    if (p->type != BWA_TYPE_NO_MATCH) {
+      int i;
+      // calculate XT tag
+      XT = "NURM"[p->type];
+      if (nn > 10) XT = 'N';
+      // print tags
+      printf("\tXT:A:%c\t%s:i:%d", XT, (mode & BWA_MODE_COMPREAD)? "NM" : "CM", p->nm);
+      if (nn) printf("\tXN:i:%d", nn);
+      if (mate) printf("\tSM:i:%d\tAM:i:%d", p->seQ, am);
+      if (p->type != BWA_TYPE_MATESW) { // X0 and X1 are not available for this type of alignment
+	printf("\tX0:i:%d", p->c1);
+	if (p->c1 <= max_top2) printf("\tX1:i:%d", p->c2);
+      }
+      printf("\tXM:i:%d\tXO:i:%d\tXG:i:%d", p->n_mm, p->n_gapo, p->n_gapo+p->n_gape);
+      if (p->md) printf("\tMD:Z:%s", p->md);
+      // print multiple hits
+      if (p->n_multi) {
+	printf("\tXA:Z:");
+	for (i = 0; i < p->n_multi; ++i) {
+	  bwt_multi1_t *q = p->multi + i;
+	  int k;
+	  j = pos_end_multi(q, p->len) - q->pos;
+	  nn = bns_coor_pac2real(bns, q->pos, j, &seqid);
+	  printf("%s,%c%d,", bns->anns[seqid].name, q->strand? '-' : '+',
+		 (int)(q->pos - bns->anns[seqid].offset + 1));
+	  if (q->cigar) {
+	    for (k = 0; k < q->n_cigar; ++k)
+	      printf("%d%c", __cigar_len(q->cigar[k]), "MIDS"[__cigar_op(q->cigar[k])]);
+	  } else printf("%dM", p->len);
+	  printf(",%d;", q->gap + q->mm);
 	}
+      }
+    }
+    putchar('\n');
+  } else { // this read has no match
+    ubyte_t *s = p->strand? p->rseq : p->seq;
+    int flag = p->extra_flag | SAM_FSU;
+    if (mate && mate->type == BWA_TYPE_NO_MATCH) flag |= SAM_FMU;
+    printf("%s\t%d\t*\t0\t0\t*\t*\t0\t0\t", p->name, flag);
+    for (j = 0; j != p->len; ++j) putchar("ACGTN"[(int)s[j]]);
+    putchar('\t');
+    if (p->qual) {
+      if (p->strand) seq_reverse(p->len, p->qual, 0); // reverse quality
+      printf("%s", p->qual);
+    } else printf("*");
+    // print the read group information if present
+    if ( rg_id != NULL ) printf("\tRG:Z:%s", rg_id);
+    if (p->clip_len < p->full_len) printf("\tXC:i:%d", p->clip_len);
+    putchar('\n');
+  }
 }
 
 bntseq_t *bwa_open_nt(const char *prefix)
@@ -530,11 +535,35 @@
 	return ntbns;
 }
 
-void bwa_print_sam_SQ(const bntseq_t *bns)
+// utility function that prints the SAM format tag:value pair if value is not null
+void tagIfNotNull(const char* tag, const char * value) {
+    if ( value != NULL )
+        printf("\t%s:%s", tag, value);
+}
+
+void bwa_print_sam_SQ(const bntseq_t *bns, const read_group_t *rg)
 {
 	int i;
+
+    // print the file header HD
+    printf("@HD\tVN:1.0\tSO:unsorted\n");
+
 	for (i = 0; i < bns->n_seqs; ++i)
 		printf("@SQ\tSN:%s\tLN:%d\n", bns->anns[i].name, bns->anns[i].len);
+
+    // print read group information, if provided
+    if ( rg != NULL && rg->ID != NULL && rg->SM != NULL ) {
+        printf("@RG\tID:%s\tSM:%s", rg->ID, rg->SM);
+        tagIfNotNull("LB", rg->LB);
+        tagIfNotNull("PL", rg->PL);
+        printf("\n");
+        //tagIfNotNull("CN", rg->CN);
+        //tagIfNotNull("DS", rg->DS);
+        //tagIfNotNull("PU", rg->PU);
+        //tagIfNotNull("PI", rg->PI);
+        //tagIfNotNull("DT", rg->DT);
+    }
+
 }
 
 void bwase_initialize() 
@@ -543,7 +572,7 @@
 	for (i = 1; i != 256; ++i) g_log_n[i] = (int)(4.343 * log(i) + 0.5);
 }
 
-void bwa_sai2sam_se_core(const char *prefix, const char *fn_sa, const char *fn_fa, int n_occ)
+void bwa_sai2sam_se_core(const char *prefix, const char *fn_sa, const char *fn_fa, int n_occ, read_group_t * rg)
 {
 	int i, n_seqs, tot_seqs = 0, m_aln;
 	bwt_aln1_t *aln = 0;
@@ -553,6 +582,7 @@
 	bntseq_t *bns, *ntbns = 0;
 	FILE *fp_sa;
 	gap_opt_t opt;
+	char * rg_id;
 
 	// initialization
 	bwase_initialize();
@@ -560,13 +590,14 @@
 	srand48(bns->seed);
 	ks = bwa_seq_open(fn_fa);
 	fp_sa = xopen(fn_sa, "r");
+	rg_id = rg != NULL ? rg->ID : NULL;
 
 	// core loop
 	m_aln = 0;
 	fread(&opt, sizeof(gap_opt_t), 1, fp_sa);
 	if (!(opt.mode & BWA_MODE_COMPREAD)) // in color space; initialize ntpac
 		ntbns = bwa_open_nt(prefix);
-	bwa_print_sam_SQ(bns);
+	bwa_print_sam_SQ(bns, rg);
 	while ((seqs = bwa_read_seq(ks, 0x40000, &n_seqs, opt.mode & BWA_MODE_COMPREAD, opt.trim_qual)) != 0) {
 		tot_seqs += n_seqs;
 		t = clock();
@@ -594,7 +625,7 @@
 
 		fprintf(stderr, "[bwa_aln_core] print alignments... ");
 		for (i = 0; i < n_seqs; ++i)
-			bwa_print_sam1(bns, seqs + i, 0, opt.mode, opt.max_top2);
+			bwa_print_sam1(bns, seqs + i, 0, opt.mode, opt.max_top2, rg_id);
 		fprintf(stderr, "%.2f sec\n", (float)(clock() - t) / CLOCKS_PER_SEC); t = clock();
 
 		bwa_free_read_seq(n_seqs, seqs);
@@ -609,22 +640,35 @@
 	free(aln);
 }
 
+void bwa_sai2sam_se_error() {
+    fprintf(stderr, "Usage: bwa samse [-n max_occ] [-f out.sam] [-i RG:ID -m RG:SM] [-l RG:LB] [-p RG:PL] <prefix> <in.sai> <in.fq>\n");
+}
+
 int bwa_sai2sam_se(int argc, char *argv[])
 {
 	int c, n_occ = 3;
-	while ((c = getopt(argc, argv, "hn:f:")) >= 0) {
+	read_group_t rg = { NULL, NULL, NULL, NULL };
+
+	while ((c = getopt(argc, argv, "hn:f:i:m:l:p:")) >= 0) {
 		switch (c) {
 		case 'h': break;
 		case 'n': n_occ = atoi(optarg); break;
         case 'f': freopen(optarg, "w", stdout); break;
-		default: return 1;
+
+        // parsing read group information
+        case 'i': rg.ID = optarg; break;
+        case 'm': rg.SM = optarg; break;
+        case 'l': rg.LB = optarg; break;
+        case 'p': rg.PL = optarg; break;
+        default: return 1;
 		}
 	}
 
-	if (optind + 3 > argc) {
-		fprintf(stderr, "Usage: bwa samse [-n max_occ] [-f out.sam] <prefix> <in.sai> <in.fq>\n");
-		return 1;
-	}
-	bwa_sai2sam_se_core(argv[optind], argv[optind+1], argv[optind+2], n_occ);
+    // a few error cases
+	if (optind + 3 > argc) { bwa_sai2sam_se_error(); return 1; }
+	if ( rg.ID != NULL && rg.SM == NULL ) { bwa_sai2sam_se_error(); return 1; }
+    if ( rg.ID == NULL && rg.SM != NULL ) { bwa_sai2sam_se_error(); return 1; }
+
+	bwa_sai2sam_se_core(argv[optind], argv[optind+1], argv[optind+2], n_occ, &rg);
 	return 0;
 }
